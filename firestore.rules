rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles: Only the user can read/write their own profile. Enforce validation.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.email == request.auth.token.email
        && request.resource.data.username is string
        && request.resource.data.username.size() >= 3
        && request.resource.data.username.size() <= 20
        && request.resource.data.createdAt is timestamp
        && request.resource.data.provider in ['google', 'password']
        // Add more thorough validation for all fields
        && request.resource.data.keys().hasOnly(['uid', 'email', 'username', 'createdAt', 'provider']);
      allow update: if request.auth != null && request.auth.uid == userId
        && request.resource.data.keys().hasOnly(['username', 'email', 'uid', 'createdAt', 'provider'])
        && request.resource.data.uid == resource.data.uid
        && request.resource.data.email == resource.data.email
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.provider == resource.data.provider
        && request.resource.data.username is string
        && request.resource.data.username.size() >= 3
        && request.resource.data.username.size() <= 20;

      // Add rules for the words subcollection
      match /words/{wordId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    // Username uniqueness: atomic check and lock
    match /usernames/{usernameDocId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.uid == request.auth.uid
        && usernameDocId == request.resource.data.username.lower();
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }
    // User preferences: strict validation
    match /userPreferences/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['dailyReminders', 'soundEffects', 'shareProgress', 'reviewNotifications', 'loginNotifications', 'darkMode'])
        && request.resource.data.dailyReminders is bool
        && request.resource.data.soundEffects is bool
        && request.resource.data.shareProgress is bool
        && request.resource.data.reviewNotifications is bool
        && request.resource.data.loginNotifications is bool
        && request.resource.data.darkMode in ['light', 'dark', 'system'];
      allow update: if request.auth != null && request.auth.uid == userId
        && request.resource.data.keys().hasOnly(['dailyReminders', 'soundEffects', 'shareProgress', 'reviewNotifications', 'loginNotifications', 'darkMode'])
        && ('dailyReminders' in request.resource.data ? request.resource.data.dailyReminders is bool : true)
        && ('soundEffects' in request.resource.data ? request.resource.data.soundEffects is bool : true)
        && ('shareProgress' in request.resource.data ? request.resource.data.shareProgress is bool : true)
        && ('reviewNotifications' in request.resource.data ? request.resource.data.reviewNotifications is bool : true)
        && ('loginNotifications' in request.resource.data ? request.resource.data.loginNotifications is bool : true)
        && ('darkMode' in request.resource.data ? request.resource.data.darkMode in ['light', 'dark', 'system'] : true);
    }
    // Word Details Cache: restrict write, validate data (example: only allow authenticated users, and validate fields)
    match /wordDetailsCache/{wordText} {
      allow read: if true;
      allow write: if request.auth != null
        && request.resource.data.word is string
        && request.resource.data.details is map
        && request.resource.data.details.keys().hasAny(['definition', 'examples']);
    }
    // Remove explicit global deny rule; Firestore denies by default.
  }
}